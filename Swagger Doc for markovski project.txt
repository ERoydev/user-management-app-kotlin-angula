openapi: 3.0.3
info:
  title: Swagger Petstore - OpenAPI 3.0
  description: |-
    This is a sample API
  contact:
    email: e.roydev@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
servers:
  - url: http://localhost:8080
tags:
  - name: users
    description: Operations about users
paths:
  /users:
    post:
      tags:
        - users
      summary: Create user
      description: This can create a new user record in the database.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: Return Status 200 and user object for the created user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
    get:
      tags:
        - users
      summary: Get all users
      description: This retrieves all the users from the database.
      operationId: getAllUsers
      responses:
        200:
          description: Array of users retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Users'
            application/xml:
              schema:
                $ref: '#/components/schemas/Users'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
  /users/{id}:
    get:
      tags:
        - users
      summary: Get user by ID
      description: Retrieve a specific user by their ID from the database.
      operationId: getUserById
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the user to retrieve
          schema:
            type: integer
            format: int64
            example: 10
      responses:
        200:
          description: User retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        404:
          description: User with this id does not exist!
          content:
            application/json:
              schema:
                  type: string
                  example: User with this id does not exists!
            application/xml:
              schema:
                type: string
                example: User with this id does not exists!
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                type: string
                example: "Error fetching user!"
            application/xml:
              schema:
                type: string
                example: "Error fetching user!"
    put:
      tags:
        - users
      summary: Update user by ID
      description: Update the details of an existing user in the database by their ID.
      operationId: updateUserById
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the user to update
          schema:
            type: integer
            format: int64
            example: 10
      requestBody:
        required: true
        description: The updated user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        200:
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: Internal Server error
          content:
            application/json:
              schema:
                type: string
                example: "Error updating user!"
    delete:
      tags:
        - users
      summary: Delete user by ID
      description: Delete a user from the database by their ID.
      operationId: deleteUserById
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the user to delete
          schema:
            type: integer
            format: int64
            example: 10
      responses:
        200:
          description: User deleted successfully and return the deleted User data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                type: string
                example: "User with this id doesn't exists."
  /users/search?searchTerm={searchTerm}:
    get:
      tags:
        - users
      summary: Search users by search term
      description: Search for users in the database by a search term (firstName, lastName, email, phoneNumber) It will match every user that have at least one field that match the searchTerm criteria and return a List with matched users.
      operationId: searchUser
      parameters:
        - name: searchTerm
          in: query
          required: true
          description: Term to search users by (e.g., part of the name or email)
          schema:
            type: string
            example: "John"
      responses:
        200:
          description: List of users matching the search term
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        400:
          description: Invalid search term
          content:
            application/json:
              schema:
                type: string
                example: "Invalid search term"
        404:
          description: No users found for the given search term
          content:
            application/json:
              schema:
                type: string
                example: "No users found for the given search term"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                type: string
                example: "An unexpected error occurred"
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        dateOfBirth:
          type: string
          format: date
          example: '2000-07-10'
        phoneNumber:
          type: string
          example: '0877546400'
        email:
          type: string
          example: emil@gmail.com
      xml:
        name: user
    Users:
      type: array
      items:
        $ref: '#/components/schemas/User'
      example: 
        - id: 1
          firstName: Alice
          lastName: Smith
          dateOfBirth: '1990-05-14'
          phoneNumber: '0891234567'
          email: alice.smith@gmail.com
        - id: 2
          firstName: Bob
          lastName: Johnson
          dateOfBirth: '1985-09-23'
          phoneNumber: '0887654321'
          email: bob.johnson@gmail.com
        - id: 3
          firstName: John
          lastName: James
          dateOfBirth: '2000-07-10'
          phoneNumber: '0877546400'
          email: emil@gmail.com
    Error:
      type: object
      properties:
        timestamp:
          type: string
          example: "2024-09-24T07:37:19.682+00:00"
        status:
          type: integer
          example: 404
        error:
          type: string
          example: "Not Found"
        path:
          type: string
          example: "/users"